{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "baseResourceName": {
        "type": "string",
        "defaultValue": "petrobras-teams-apps-bot-multiQnA-dev",
        "minLength": 1,
        "metadata": {
          "description": "The base name to use for the resources that will be provisioned."
        }
      },
      "botClientId": {
        "type": "string",
        "minLength": 36,
        "maxLength": 36,
        "metadata": {
          "description": "The client ID of the bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
        }
      },
      "botClientSecret": {
        "type": "securestring",
        "minLength": 1,
        "metadata": {
          "description": "The client secret of the bot Azure AD app."
        }
      },
      "appDisplayName": {
        "type": "string",
        "defaultValue": "Petrobras Bot",
        "minLength": 1,
        "metadata": {
          "description": "O nome da App (e do bot)."
        }
      },
      "appDescription": {
        "type": "string",
        "defaultValue": "Petrobras MultiQnA Bot",
        "minLength": 1,
        "metadata": {
          "description": "Petrobras MultiQnA Bot"
        }
      },
      "appIconUrl": {
        "type": "string",
        "minLength": 1,
        "defaultValue": " ",
        "metadata": {
          "description": "O Link para o icone (PNG) da aplicação."
        }
      },
      "appShouldDeploy": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Define se esse script deve criar o App Service."
        }
      },
      "tenantId": {
        "type": "string",
        "defaultValue": "[subscription().tenantId]",
        "minLength": 1,
        "maxLength": 36,
        "metadata": {
          "description": "O ID do tenant da Aplicação."
        }
      },
      "hostingPlanSku": {
        "type": "string",
        "allowedValues": [
          "Basic",
          "Standard",
          "Premium"
        ],
        "defaultValue": "Standard",
        "metadata": {
          "description": "O tier de preço da aplicação."
        }
      },
      "hostingPlanSize": {
        "type": "string",
        "allowedValues": [
          "1",
          "2",
          "3"
        ],
        "defaultValue": "1",
        "metadata": {
          "description": "O tamanho do Hosting Plan da aplicação(small, medium, or large)."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Localização em que os recursos vão ficar disponiveis."
        }
      }
    },
    "variables": {
      "botName": "[parameters('baseResourceName')]",
      "botAppName": "[parameters('baseResourceName')]",
      "botAppDomain": "[concat(variables('botAppName'), '.azurewebsites.net')]",
      "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
      "botAppShouldDeploy": "[bool(parameters('appShouldDeploy'))]",
      "hostingPlanName": "[parameters('baseResourceName')]",
      "storageAccountName": "[uniquestring(concat(resourceGroup().id, parameters('baseResourceName')))]",
      "appInsightsName": "[parameters('baseResourceName')]",
      "sharedSkus": [
        "Free",
        "Shared"
      ],
      "isSharedPlan": "[contains(variables('sharedSkus'), parameters('hostingPlanSku'))]",
      "skuFamily": "[if(equals(parameters('hostingPlanSku'), 'Shared'), 'D', take(parameters('hostingPlanSku'), 1))]"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('storageAccountName')]",
        "apiVersion": "2018-02-01",
        "location": "[parameters('location')]",
        "kind": "Storage",
        "sku": {
          "name": "Standard_LRS"
        }
      },
      {
        "apiVersion": "2016-09-01",
        "type": "Microsoft.Web/serverfarms",
        "condition": "[variables('botAppShouldDeploy')]",
        "name": "[variables('hostingPlanName')]",
        "location": "[parameters('location')]",
        "properties": {
          "name": "[variables('hostingPlanName')]",
          "hostingEnvironment": "",
          "numberOfWorkers": 1
        },
        "sku": {
          "name": "[if(variables('isSharedPlan'), concat(variables('skuFamily'), '1'), concat(variables('skuFamily'), parameters('hostingPlanSize')))]",
          "tier": "[parameters('hostingPlanSku')]",
          "size": "[concat(variables('skuFamily'), parameters('hostingPlanSize'))]",
          "family": "[variables('skuFamily')]",
          "capacity": 0
        }
      },
      {
        "apiVersion": "2016-08-01",
        "type": "Microsoft.Web/sites",
        "condition": "[variables('botAppShouldDeploy')]",
        "name": "[variables('botAppName')]",
        "location": "[parameters('location')]",
        "kind": "app",
        "properties": {
          "name": "[variables('botAppName')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "enabled": true,
          "reserved": false,
          "clientAffinityEnabled": true,
          "clientCertEnabled": false,
          "hostNamesDisabled": false,
          "containerSize": 0,
          "dailyMemoryTimeQuota": 0,
          "httpsOnly": true,
          "siteConfig": {
            "alwaysOn": "[not(variables('isSharedPlan'))]",
            "appSettings": [
              {
                "name": "PROJECT",
                "value": "Source/Petrobras.Teams.Apps.MultiQnA/Petrobras.Teams.Apps.MultiQnA.csproj"
              },
              {
                "name": "SITE_ROLE",
                "value": "app"
              },
              {
                "name": "AzureAd:TenantId",
                "value": "[parameters('tenantId')]"
              },
              {
                "name": "AzureAd:ClientId",
                "value": "[parameters('botClientId')]"
              },
              {
                "name": "AzureAd:ClientSecret",
                "value": "[parameters('botClientSecret')]"
              },
              {
                "name": "AzureAd:ApplicationIdURI",
                "value": "[variables('botAppUrl')]"
              },
              {
                "name": "MicrosoftAppId",
                "value": "[parameters('botClientId')]"
              },
              {
                "name": "MicrosoftAppPassword",
                "value": "[parameters('botClientSecret')]"
              },
              {
                "name": "StorageAccountConnectionString",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
              },
              {
                "name": "AllowedTenants",
                "value": "[parameters('tenantId')]"
              },
              {
                "name": "DisableTenantFilter",
                "value": "false"
              },
              {
                "name": "DisableAuthentication",
                "value": "false"
              },
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('Microsoft.Insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "10.15.2"
              }
            ],
            "cors": {
              "supportCredentials": true,
              "allowedOrigins": [
                "[variables('botAppUrl')]"
              ]
            }
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
        ]
      },
      {
        "apiVersion": "2015-05-01",
        "name": "[variables('appInsightsName')]",
        "type": "Microsoft.Insights/components",
        "location": "[parameters('location')]",
        "tags": {
          "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
        },
        "properties": {
          "Application_Type": "web",
          "Request_Source": "rest"
        }
      },
      {
        "apiVersion": "2018-07-12",
        "name": "[variables('botName')]",
        "type": "Microsoft.BotService/botServices",
        "location": "global",
        "sku": {
          "name": "F0"
        },
        "kind": "sdk",
        "properties": {
          "displayName": "[parameters('appDisplayName')]",
          "description": "[parameters('appDescription')]",
          "iconUrl": "[parameters('appIconUrl')]",
          "msaAppId": "[parameters('botClientId')]",
          "endpoint": "[concat(variables('botAppUrl'), '/api/messages')]",
          "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
        },
        "resources": [
          {
            "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
            "type": "Microsoft.BotService/botServices/channels",
            "apiVersion": "2018-07-12",
            "location": "global",
            "sku": {
              "name": "F0"
            },
            "properties": {
              "channelName": "MsTeamsChannel",
              "location": "global",
              "properties": {
                "isEnabled": true
              }
            },
            "dependsOn": [
              "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
            ]
          }
        ]
      }
    ],
    "outputs": {
      "botId": {
        "type": "string",
        "value": "[parameters('botClientId')]"
      },
      "appDomain": {
        "type": "string",
        "value": "[variables('botAppDomain')]"
      }
    }
  }